#!/bin/bash


usage ()
{
    echo "Usage: vcedit -c <class> -d <repodir> -f <config_file> -r <svn_repo_url> -u <svn_user> <filename>"
    echo "Usage: vcedit -i <filename>"
    echo "Usage: vcedit -l <filename>"
    echo "Usage: vcedit -v <filename>"
    exit 0
}

cicomment ()
{
    if [[ -z $1 ]];then
        echo Please enter a single line comment for changes made to "${EDIT_FILE}", then press [ENTER]:
        read COMMENT
    else
        COMMENT="$1"
    fi
}

vcinit ()
{
    if [ ! $REPODIR ]; then
        REPODIR=$(basename `dirname $2`)
    fi
    FILENAME=$(basename $2)
    echo svn repo is $SVNREPO
    if [ "$1" == "new" ]
    then
        while true
        do
            if [ ! $SVNREPO ]
            then
                echo Please enter URL of Subversion repository: 
                read SVNREPO
            fi
            SVNURL=$(svn --config-option config:tunnels:ssh="$SSHOPTS" info $SVNREPO | grep "Repository Root" | awk {'print $3'})
            if [ -z $SVNURL ];then
                echo $SVNREPO is not a valid Subversion repository. 
                unset SVNREPO
            else
                break
            fi
        done
        while [ ! $CLASS ]
        do
            echo Please enter node class, e.g. login, hostname, etc.:
            read CLASS
        done
        svn info ${SVNURL}/${REPODIR}/${CLASS} > /dev/null 2>&1
        if [ $? == 0 ]; then
            echo
            echo -e "\033[47;31mYou are importing new file under a non-version-controlled directory into an existing remote repository. \033[0m"
            echo -e "\033[47;31m	\033[0m"
            echo -e "\033[47;31mDoing so will force checkout files the remote repository to your working directory where files\033[0m"
            echo -e "\033[47;31min your working directory could be overwritten by files of the same name from the remote repository. \033[0m"
            echo
            VALID_RESPONSE=0
            while [ $VALID_RESPONSE == 0 ]
            do
                echo Do you wish to continue?
                echo Yes \(Y\)
                echo No \(N\)
                read RESPONSE
                case $RESPONSE in
                    Y|y|Yes|YES|yes)
                        VALID_RESPONSE=1
                        ;;
                    N|n|No|NO|no)
                        VALID_RESPONSE=1
                        exit 0
                        ;;
                    *)
                        echo
                        echo Please specify "Yes" or "No" as answer only.
                        echo Please retry.
                        echo
                        ;;
                esac
            done
        fi
        cicomment "Initial import of $2 to revision control."
        [ $VCDEBUG ] && echo Executing: "svn import $2 ${SVNURL}/${REPODIR}/${CLASS}/${FILENAME} -m \"$USERNAME: $COMMENT\""
        svn --config-option config:tunnels:ssh="$SSHOPTS" import $2 ${SVNURL}/${REPODIR}/${CLASS}/${FILENAME} -m "$USERNAME: $COMMENT"
        if [ $? != 0 ];then
            echo Error occurs, refer to previous error message for details. 
            exit 1
        fi
        [ $VCDEBUG ] && echo Executing: "svn checkout --force ${SVNURL}/${REPODIR}/${CLASS} ${DIRNAME}"
        svn --config-option config:tunnels:ssh="$SSHOPTS" checkout --force ${SVNURL}/${REPODIR}/${CLASS} ${DIRNAME}
        [ $VCDEBUG ] && echo Executing: "svn -R ps svn:needs-lock ON $2"
        svn -R ps svn:needs-lock ON $2
        [ $VCDEBUG ] && echo Executing: "svn ci $2 -m \"$USER: set needs-lock properties.\""
        svn --config-option config:tunnels:ssh="$SSHOPTS" ci $2 -m "$USER: set needs-lock properties."
    elif [ "$1" == "add" ]
    then
        [ $VCDEBUG ] && echo Executing: "svn add --parents $2"
        svn add --parents $2
        [ $VCDEBUG ] && echo Executing: "svn -R ps svn:needs-lock ON $2"
        svn --config-option config:tunnels:ssh="$SSHOPTS" -R ps svn:needs-lock ON $2
        cicomment "Adding $2 to revision control."
        [ $VCDEBUG ] && echo Executing: "svn ci $DIRNAME -m \"$USERNAME: $COMMENT\""
        svn --config-option config:tunnels:ssh="$SSHOPTS" ci $DIRNAME -m "$USERNAME: $COMMENT"
    fi
}

while [ -n "$1" ]; do
    while getopts ":c:d:f:hilr:u:v" OPT; do
        case $OPT in
            c)
                CLASS=$OPTARG
                ;;
            d)
                REPODIR=$OPTARG
                ;;
            f)
                CONF=$OPTARG
                ;;
            h)
                usage && exit 0
                ;;
            i)
                VCINFO=1
                ;;
            l)
                VCLIST=1
                ;;
       	    r)
                SVNREPOOPT=$OPTARG
                ;;
            u)
                USERNAME=$OPTARG
                ;;
            v)
                VCLOG=1
                ;;
            \?)
                echo
                echo Invalid option -$OPTARG.
                usage
                ;;
            :)
                echo
                echo Missing argument for -$OPTARG.
                usage
                ;;
            *)
                usage
                ;;
        esac
    done
    if [ $OPTIND == 1 ]; then
        if [ -f $1 ]; then
            EDIT_FILE=`readlink -f $(dirname $1)`/$(basename $1)
        elif [ -d $1 ]; then
            echo \"$1\" is a directory. 
            exit 1
        else
            NEWFILE=1
            vi $1
            if [ -f $1 ]; then
                EDIT_FILE=`readlink -f $(dirname $1)`/$(basename $1)
            else
                exit 0
            fi
        fi
        shift
    else
        shift $((OPTIND-1))
        unset OPTIND
    fi
done

trap "echo Process is interrupted; echo reverting changes made to $EDIT_FILE; svn revert $EDIT_FILE; exit 255" SIGINT SIGTERM

if [ $USER == "root" ]
then
    if [ -z $USERNAME ]
    then
        echo Please enter username, then press [ENTER]:
        read USERNAME
    fi
else
    USERNAME=$USER
fi

if [ ! $CONF ]
then
    CONF=`dirname $0`/vc.conf
fi

if [ -f $CONF ]
    then
        . $CONF
    else
        echo $CONF is not found or is not a file. 
        exit 1
fi

[ "$SSHOPTS" ] || SSHOPTS="$SVN_SSH ssh -q"

[ $VCDEBUG ] && echo Operating on $EDIT_FILE
if [ ! $EDIT_FILE ]
then
    echo No file to edit
    if [ $VCLIST ] || [ $VCINFO ] || [ $VCLOG ]
    then
        svn info > /dev/null 
        [ $? == 0 ] || exit 1
        REPOURL=`svn info | grep "Relative URL" | awk {'print $NF'}`
        [ $VCLIST ] && echo Listing files under $REPOURL && svn --config-option config:tunnels:ssh="$SSHOPTS" ls -v -R `svn info | grep ^URL | awk {'print $NF'}`
        [ $VCINFO ] && echo Showing info of $REPOURL && svn --config-option config:tunnels:ssh="$SSHOPTS" info
        [ $VCLOG ] && echo Showing changelog of $REPOURL && svn --config-option config:tunnels:ssh="$SSHOPTS" log -v
        exit 0
    else    
        usage
        exit 1
    fi
fi

if [ $VCLOG ] || [ $VCINFO ] || [ $VCLIST ]
then
    [ $VCLOG ] && svn --config-option config:tunnels:ssh="$SSHOPTS" log -v $EDIT_FILE
    [ $VCINFO ] && svn --config-option config:tunnels:ssh="$SSHOPTS" info $EDIT_FILE
    [ $VCLIST ] && svn --config-option config:tunnels:ssh="$SSHOPTS" ls -R -v $EDIT_FILE
    [ $? == 0 ] || exit 1
    exit 0
fi

if [ $SVNREPOOPT ]
then
    SVNREPO=$SVNREPOOPT
fi

DIRNAME=$(dirname $EDIT_FILE)
SVN_STATUS=`svn status $EDIT_FILE -v`
if [ $? != 0 ]
then
    echo Unable to retreive SVN status. 
    exit 1
fi
FILE_STATUS=(`echo $SVN_STATUS | awk {'print $1,$NF'}`)
if [ -z $FILE_STATUS ] 
then
    echo 
    VALID_RESPONSE=0
    while [ $VALID_RESPONSE == 0 ]
    do
        echo Would you like to add the file $EDIT_FILE to revision control?
        echo Yes \(Y\) No \(N\)
        read RESPONSE
        case $RESPONSE in
            Y|y|Yes|YES|yes)
                VALID_RESPONSE=1
                DIR_STATUS=(`svn status $DIRNAME -v 2>/dev/null`)
                if [ -z $DIR_STATUS ]
                then
                    echo check $SVNREPO
                    vcinit new $EDIT_FILE
                else
                    vcinit add $EDIT_FILE
                fi
                ;;
            N|n|No|NO|no)
                VALID_RESPONSE=1
                echo
                [[ ! $NEWFILE ]] && vi $EDIT_FILE 
                echo
                exit 0
                ;;
            *)
                echo
                echo Please specify "Yes" or "No" as answer only.
                echo Please retry.
                echo
                ;;
        esac
    done
else
    if [ $CLASS ]
    then
        SVNURL=$(svn --config-option config:tunnels:ssh="$SSHOPTS" info | grep "^Repository Root" | awk {'print $NF'}) 
        REPODIR=$(svn --config-option config:tunnels:ssh="$SSHOPTS" info | grep "^Relative URL" | awk {'print $NF'} | awk -F '/' {'print $2'})
        svn info $SVNURL/$REPODIR/$CLASS 2>/dev/null
        if [ $? == 0 ]
        then
            [ $VCDEBUG ] && echo Executing: "svn switch $SVNURL/$REPODIR/$CLASS --ignore-ancestry"
            svn switch $SVNURL/$REPODIR/$CLASS --ignore-ancestry
        else
            REPOCLASS=$(svn --config-option config:tunnels:ssh="$SSHOPTS" info | grep "^Relative URL" | awk {'print $NF'} | awk -F '/' {'print $3'})
            cicomment "Branching $REPOCLASS to $CLASS"
            [ $VCDEBUG ] && echo Executing: "svn copy $SVNURL/$REPODIR/$REPOCLASS $SVNURL/$REPODIR/$CLASS -m \"$USERNAME: $COMMENT\""
            svn --config-option config:tunnels:ssh="$SSHOPTS" copy $SVNURL/$REPODIR/$REPOCLASS $SVNURL/$REPODIR/$CLASS -m "$USERNAME: $COMMENT"
            [ $VCDEBUG ] && echo Executing: "svn switch $SVNURL/$REPODIR/$CLASS --ignore-ancestry"
            svn switch $SVNURL/$REPODIR/$CLASS --ignore-ancestry
        fi
    fi
fi
<<DEPRECATED
elif [ "${FILE_STATUS[0]}" == "K" ]
then
    echo File \"$EDIT_FILE\" is currently locked and being edited by user \"${FILE_STATUS[1]}\". 
    exit 1
elif [ "${FILE_STATUS[0]}" == "?" ]
then
    echo File \"$EDIT_FILE\" is not under revision control. 
    VALID_RESPONSE=0
    while [ $VALID_RESPONSE == 0 ]
    do
        echo Would you like to add the file \"$EDIT_FILE\" to revision control? 
        echo Yes \(Y\) No \(N\)
        read RESPONSE
        case $RESPONSE in
            Y|y|Yes|YES|yes)
                VALID_RESPONSE=1
                vcinit add $EDIT_FILE
                ;;
            N|n|No|NO|no)
                VALID_RESPONSE=1
                [[ ! $NEWFILE ]] && vi $EDIT_FILE
                exit 0
                ;;
            *)
                echo
                echo Please specify "Yes" or "No" as answer only.
                echo Please retry.
                echo
                ;;
        esac  
    done
elif [ "${FILE_STATUS[0]}" == "M" ]
then
    while true
    do
        echo File \"$EDIT_FILE\" has been modified but changes are not committed. 
        echo Would you like to discard the changes and proceed to edit the file? 
        echo Would you like to view the changes since the last commit? 
        echo Would you like to include the changes and proceed to edit the file? 
        echo Discard \(D\), View \(V\), Include \(I\)
        read RESPONSE
        case $RESPONSE in
            D)
                svn revert $EDIT_FILE
                break
                ;;
            V)
                svn diff $EDIT_FILE
                ;;
            I)
                break
                ;;
            *)
                echo
                echo Please specify "D", "V" or "I" as answer only. 
                echo Please retry. 
                echo
                ;;
        esac
    done
fi
DEPRECATED

case ${FILE_STATUS[0]} in
    K)
        echo File \"$EDIT_FILE\" is currently locked and being edited by user \"${FILE_STATUS[1]}\".
        exit 1
        ;;
    \?)
        echo File \"$EDIT_FILE\" is not under revision control.
        VALID_RESPONSE=0
        while [ $VALID_RESPONSE == 0 ]
        do
            echo Would you like to add the file \"$EDIT_FILE\" to revision control?
            echo Yes \(Y\) No \(N\)
            read RESPONSE
            case $RESPONSE in
                Y|y|Yes|YES|yes)
                    VALID_RESPONSE=1
                    vcinit add $EDIT_FILE
                    ;;
                N|n|No|NO|no)
                    VALID_RESPONSE=1
                    [[ ! $NEWFILE ]] && vi $EDIT_FILE
                    exit 0
                    ;;
                *)
                    echo
                    echo Please specify "Yes" or "No" as answer only.
                    echo Please retry.
                    echo
                    ;;
            esac
        done
        ;;
    M)
        while true
        do
            echo File \"$EDIT_FILE\" has been modified but changes are not committed.
            echo Would you like to discard the changes and proceed to edit the file?
            echo Would you like to view the changes since the last commit?
            echo Would you like to include the changes and proceed to edit the file?
            echo Discard \(D\), View \(V\), Include \(I\)
            read RESPONSE
            case $RESPONSE in
                D)
                    svn revert $EDIT_FILE
                    break
                    ;;
                V)
                    svn diff $EDIT_FILE
                    ;;
                I)
                    break
                    ;;
                *)
                    echo
                    echo Please specify "D", "V" or "I" as answer only.
                    echo Please retry.
                    echo
                    ;;
            esac
        done
        ;;
esac

[ $VCDEBUG ] && echo Executing: svn lock $EDIT_FILE
svn --config-option config:tunnels:ssh="$SSHOPTS" lock $EDIT_FILE
if [ $? != 0 ]
then
    echo Cannot obtain lock on $EDIT_FILE. 
    svn revert $EDIT_FILE
    exit 1
fi
[[ ! $NEWFILE ]] && vi $EDIT_FILE
NUM_DIFF=`svn diff ${EDIT_FILE}|wc -l`
if [ $NUM_DIFF != 0 ]
then
    cicomment
    echo $USERNAME: $COMMENT
    [ $VCDEBUG ] && echo Executing: "svn ci ${EDIT_FILE} -m \"$USERNAME: $COMMENT\""
    svn --config-option config:tunnels:ssh="$SSHOPTS" ci ${EDIT_FILE} -m "$USERNAME: $COMMENT"
else
    echo No change made on $EDIT_FILE
    [ $VCDEBUG ] && echo Executing: "svn unlock $EDIT_FILE"
    svn --config-option config:tunnels:ssh="$SSHOPTS" unlock $EDIT_FILE
fi

